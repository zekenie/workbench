datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String         @id @default(cuid())
  name           String?
  email          String         @unique
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  refreshTokens  RefreshToken[]
  passwordHash   String?
  canvasAccesses CanvasAccess[]
}

model RefreshToken {
  id        String    @id @default(cuid())
  tokenHash String    @unique
  userId    String?
  user      User?     @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  usedAt    DateTime?
}

model ApiToken {
  id        String   @id @default(cuid())
  tokenHash String   @unique
  createdAt DateTime @default(now())
  // scopes???
  // expires?
}

model Canvas {
  id                   String              @id @default(cuid())
  canvasAccesses       CanvasAccess[]
  updatedAt            DateTime            @default(now())
  createdAt            DateTime            @default(now())
  title                String?
  titleGenerated       String?
  currentSnapshot      Json?
  clock                Int                 @default(0)
  description          String?
  descriptionGenerated String?
  snapshots            Snapshot[]
  canvasEnvironment    CanvasEnvironment[]
}

model CanvasEnvironment {
  id        String   @id @default(cuid())
  updatedAt DateTime @default(now())
  createdAt DateTime @default(now())
  machineId String   @unique
  appId     String
  volumeId  String
  region    String
  type      String
  canvas    Canvas   @relation(fields: [canvasId], references: [id])
  canvasId  String

  @@unique([type, canvasId])
}

model CanvasAccess {
  id        String   @id @default(cuid())
  canvasId  String
  canvas    Canvas   @relation(fields: [canvasId], references: [id])
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  // type String -- at some point some kind of COmmenter / Editor / Admin / etc
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@unique([userId, canvasId])
}

model Snapshot {
  id        String   @id @default(cuid())
  canvasId  String
  canvas    Canvas   @relation(fields: [canvasId], references: [id])
  clock     Int
  patches   Json
  digest    String
  createdAt DateTime @default(now())
}

model CodeNode {
  // tl draw id
  id               String   @id
  inputCodeHash    String
  compiledCodeHash String
  canvasId         String
  codeName         String
  inputCode        String
  compiledCode     String
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now())
  dependencies     String[]
  clock            Int
}

enum EventStatus {
  PENDING
  PROCESSING
  PUBLISHED
  FAILED
}

model Event {
  eventId    String      @id
  timestamp  DateTime
  event      String
  payload    Json
  status     EventStatus @default(PENDING)
  retryCount Int         @default(0)
  lastError  String?

  @@index([status, timestamp(sort: Asc)], map: "idx_outbox_status_timestamp")
}
